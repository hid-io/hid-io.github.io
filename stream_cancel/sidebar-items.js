initSidebarItems({"struct":[["TakeUntil","A stream combinator which takes elements from a stream until a future resolves."],["Trigger","A handle to a set of cancellable streams."],["Tripwire","A `Tripwire` is a convenient mechanism for implementing graceful shutdown over many asynchronous streams. A `Tripwire` is a `Future` that is `Clone`, and that can be passed to [`StreamExt::take_until`]. All `Tripwire` clones are associated with a single [`Trigger`], which is then used to signal that all the associated streams should be terminated."],["Valve","A `Valve` is associated with a [`Trigger`], and can be used to wrap one or more asynchronous streams. All streams wrapped by a given `Valve` (or its clones) will be interrupted when [`Trigger::close`] is called on the valve's associated handle."],["Valved","A `Valved` is wrapper around a `Stream` that enables the stream to be turned off remotely to initiate a graceful shutdown. When a new `Valved` is created with [`Valved::new`], a handle to that `Valved` is also produced; when [`Trigger::close`] is called on that handle, the wrapped stream will immediately yield `None` to indicate that it has completed."]],"trait":[["StreamExt","This `Stream` extension trait provides a `take_until` method that terminates the stream once the given future resolves."]]});